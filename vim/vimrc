" SELF DEFINED VIM SETTINGS!
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.

" -------------- Plugins ---------
" No need to behave in a strongly vi-compatible way
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'gmarik/vundle.vim'

" Installed Plugins
Plugin 'Syntastic' " Awesome syntax checker.
Plugin 'scrooloose/nerdtree' " File tree manager (F7).
Plugin 'tpope/vim-surround' " Surroud selections with anything.
Plugin 'tpope/vim-repeat' " Support plugin repetition with `.`.
Plugin 'Lokaltog/vim-easymotion' " Visually marked text object motion
Plugin 'tComment' " Comment simplifier
Plugin 'bling/vim-airline' " Statusbar
Plugin 'majutsushi/tagbar' " Tagbar
Plugin 'airblade/vim-gitgutter' " Show git diff inline while editting files
Plugin 'kien/ctrlp.vim' " Fussy-Search file manager
Plugin 'dag/vim-fish'
Plugin 'terryma/vim-multiple-cursors' " Allows to work with multiple cursors
Plugin 'Valloric/YouCompleteMe' " Amazing auto completion

" Syntax plugins
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'othree/html5.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'groenewege/vim-less'
Plugin 'plasticboy/vim-markdown'
Plugin 'altercation/vim-colors-solarized'

call vundle#end()
filetype plugin indent on

" Syntastic
scriptencoding utf-8
let g:syntastic_error_symbol='✗✗'
let g:syntastic_style_error_symbol='✗✗'
let g:syntastic_warning_symbol='⚠⚠'
let g:syntastic_style_warning_symbol='⚠⚠'
let g:syntastic_check_on_open=1

" Nerdtree
map <F7> :NERDTreeToggle<CR>

" Airline
let g:airline_powerline_fonts = 1 " Enable powerline icons.
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#enabled = 1
set ttimeoutlen=50 " Stop the delay in airline when leaving insertmode.

" Tagbar
map <F8> :Tagbar<CR>
highlight TagbarHighlight term=underline ctermfg=130 ctermbg=0 guifg=Brown

" -------------- Plugins ---------

if exists('+colorcolumn')
    set colorcolumn=80             " Mark the 80 colomn
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
end

if &shell =~# 'fish$'
    set shell=bash
endif


" Indenting like a boss
set autoindent
set smartindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab

set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set ruler                       " display the current cursor position in bottomleft
set showcmd                     " display incomplete commands
set history=50                  " keep 50 commands 50 patterns in the history
set incsearch                   " do incremental searching
set showmatch                   " Show matching bracket
set hidden                      " Hides current buffer on opening a new file instead of closing
set history=1000                " remember more commands and search history
set undolevels=1000             " use many muchos levels of undo
set title                       " change the terminal's title
set visualbell                  " don't beep
set noerrorbells                " don't beep
set laststatus=2                " always show the statusbar.
set t_Co=256                    " set color scheme to 256
set nobackup                    " set no backups
set number                      " set line numbers
set hlsearch                    "

let g:mapleader = ','

" Set the solarized colorscheme with dark background cause its nice
set background=dark
syntax on
colorscheme solarized

if !exists(":W")
    command W w                     " use W to (w)rite
    command Q q                     " use Q to (q)uit
    command Wq wq                   " use W to (w)rite(q)uit
    command WQ wq                   " ...
    command Wa wa                   " ...
    command Qa qa                   " ...
    command Wqa wqa                 " ...
    command WQa wqa                 " ...
    command WQA wqa                 " ...

    " Set escape to remove highlighting
    nnoremap <silent><leader>/ :nohls <CR>
    nnoremap ; :

    " Dont stop visual mode on block (un)indent
    vnoremap < <gv
    vnoremap > >gv

    " Allow for blocks to be walked through the code
    vnoremap J :m '>+1<CR>gv=gv
    vnoremap K :m '<-2<CR>gv=gv

    " Jump to next/previous merge conflict marker
    nnoremap <silent> ]c /\v^(\<\|\=\|\>){7}([^=].+)?$<CR>
    nnoremap <silent> [c ?\v^(\<\|\=\|\>){7}([^=].+)\?$<CR>

endif

if has('autocmd')

    " For all text files set 'textwidth' to 78 characters.
    augroup SetWrapperForTextFiles
        au!
        au BufRead,BufNewFile *.md setlocal tw=80 spell
        au BufRead,BufNewFile *.txt setlocal tw=80 spell
        au BufRead,BufNewFile *.tex setlocal tw=80 spell
    augroup END

    " Automatically remove all trailing whitespace from the file before
    " saving.
    augroup RemoveTrailingWhitespace
        au!
        autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
    augroup END

    augroup reload_vimrc
        au!
        autocmd BufWritePost $MYVIMRC source $MYVIMRC
    augroup END

    augroup JumpCursorOnEdit
        au!
        autocmd BufReadPost *
        \ if expand("<afile>:p:h") !=? $TEMP |
        \   if line("'\"") > 1 && line("'\"") <= line("$") |
        \     let JumpCursorOnEdit_foo = line("'\"") |
        \     let b:doopenfold = 1 |
        \     if (foldlevel(JumpCursorOnEdit_foo) >
        \               foldlevel(JumpCursorOnEdit_foo - 1)) |
        \        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
        \        let b:doopenfold = 2 |
        \     endif |
        \     exe JumpCursorOnEdit_foo |
        \   endif |
        \ endif

        " Need to postpone using "zv" until after reading the modelines.
        autocmd BufWinEnter *
        \ if exists("b:doopenfold") |
        \   exe "normal zv" |
        \   if(b:doopenfold > 1) |
        \       exe  "+".1 |
        \   endif |
        \   unlet b:doopenfold |
        \ endif
    augroup END
endif

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

" ignore *.ext files
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.so,*.a,
            \*.lib,*.obj,*.png,*.jpg,*.gif,*.dll,*.pdf

highlight ColorColumn ctermbg=DarkGray
highlight LineNr ctermbg=Black
highlight SignColumn ctermbg=black
highlight Search term=reverse cterm=bold

" Highlight merge conflict markers
match Todo '\v^(\<|\=|\>){7}([^=].+)?$'

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on
